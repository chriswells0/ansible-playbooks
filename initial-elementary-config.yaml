---
- name: Perform initial Debian configuration.
  import_playbook: initial-debian-config.yaml

- name: Perform initial elementary OS configuration.
  become: yes
  hosts: laptops:&linuxhosts

  vars_files:
    - vars/systems.yaml
    - vars/users.yaml

  vars:
    host:
      category: '{{ systems[(ansible_hostname | lower)]["category"] }}'
      name: '{{ ansible_hostname | lower }}'
    autostart: '{{ (users["all"]["autostart"] | default([])) + (users[user]["autostart"] | default([])) }}'
    directories: '{{ (users["all"]["directories"] | default([])) + (users[user]["directories"] | default([])) }}'
    firewall:
      ssh_from_ips: '{{ (systems["all"]["firewall"]["ssh_from_ips"] | default([])) + (systems[host.category]["firewall"]["ssh_from_ips"] | default([])) + (systems[host.name]["firewall"]["ssh_from_ips"] | default([])) }}'
    hardware:
      bluetooth:
        enabled: '{{ (systems[host.category]["hardware"]["bluetooth"]["enabled"] | default(false)) or (systems[host.name]["hardware"]["bluetooth"]["enabled"] | default(false)) }}'
      wowlan:
        enabled: '{{ (systems[host.category]["hardware"]["wowlan"]["enabled"] | default(false)) or (systems[host.name]["hardware"]["wowlan"]["enabled"] | default(false)) }}'
    packages:
      install: '{{ (systems["all"]["packages"]["install"] | default([])) + (systems[host.category]["packages"]["install"] | default([])) + (systems[host.name]["packages"]["install"] | default([])) }}'
    plank:
      add: '{{ (users["all"]["plank"]["add"] | default([])) + (users[user]["plank"]["add"] | default([])) }}'
      remove: '{{ (users["all"]["plank"]["remove"] | default([])) + (users[user]["plank"]["remove"] | default([])) }}'
    preferences:
      dconf: '{{ (users["all"]["preferences"]["dconf"] | default([])) + (users[user]["preferences"]["dconf"] | default([])) + (systems[host.name]["preferences"]["dconf"] | default([])) }}'
      keepassxc: '{{ (users["all"]["preferences"]["keepassxc"] | default([])) + (users[user]["preferences"]["keepassxc"] | default([])) }}'
    rdp_hosts: '{{ (users["all"]["rdp_hosts"] | default([])) + (users[user]["rdp_hosts"] | default([])) }}'

  handlers:

    - name: Restart LightDM
      service:
        name: lightdm
        state: restarted

  tasks:

    - name: Allow limited SSH connections.
      ufw:
        direction: in
        from_ip: '{{ item }}'
        protocol: tcp
        rule: limit
        state: enabled
        to_port: '22'
      with_items: '{{ firewall.ssh_from_ips }}'

    - name: Deny all other incoming traffic by default.
      ufw:
        direction: incoming
        policy: deny
        state: enabled

    - name: If desired, enable the Guest account.
      lineinfile:
        line: 'allow-guest=true'
        path: /usr/share/lightdm/lightdm.conf.d/50-disable-guest.conf
        regexp: '^allow-guest='
        state: present
      notify: Restart LightDM
      when: users.guest.enabled

    - name: Enable local network DNS resolution.
      file:
        dest: /etc/resolv.conf
        force: yes
        src: /run/systemd/resolve/resolv.conf
        state: link

    - name: Check whether resolvconf exists.
      changed_when: false
      ignore_errors: yes
      register: resolvconf_exists
      shell: which resolvconf > /dev/null 2>&1

    - name: Symlink resolvectl to resolveconf.
      file:
        dest: /usr/local/bin/resolvconf
        force: yes
        src: /usr/bin/resolvectl
        state: link
      when: resolvconf_exists.rc != 0

    - name: Upload backup file for monitor settings (login screen).
      copy:
        dest: /var/lib/lightdm/.config/
        group: lightdm
        mode: '644'
        owner: lightdm
        src: ~/Backups/Ansible/{{ host.name }}/home/{{ user }}/.config/monitors.xml
      ignore_errors: yes
      when: '("~/Backups/Ansible/" + host.name + "/home/" + user + "/.config/monitors.xml") is file'

    - name: Upload backup file for monitor settings (user).
      copy:
        dest: /home/{{ user }}/.config/
        group: '{{ user }}'
        mode: '664'
        owner: '{{ user }}'
        src: ~/Backups/Ansible/{{ host.name }}/home/{{ user }}/.config/monitors.xml
      ignore_errors: yes
      when: '("~/Backups/Ansible/" + host.name + "/home/" + user + "/.config/monitors.xml") is file'

    - name: Create script to automatically remove old kernels.
      copy:
        content: |
          #!/bin/bash

          OLD_VERSIONS=$(dpkg -l | grep -E 'linux-image(-unsigned)?-[1-9]+' | grep '^ii' | grep -Fv $(uname -r) | awk '{print $2}' | grep -oE '[1-9][0-9.-]{2,}[0-9]' | sort -V | head -n -1)

          for KERNEL_VERSION in ${OLD_VERSIONS}; do
              apt -y purge linux-image{,-unsigned}-${KERNEL_VERSION}-generic
          done
        dest: /etc/cron.hourly/remove-old-kernels
        mode: '755'

    - name: Check whether Wake-on-WLAN is enabled.
      changed_when: false
      ignore_errors: yes
      no_log: yes
      register: wowlan_enabled
      shell: 'iw phy0 wowlan show | grep "enabled"'
      when: hardware.wowlan.enabled

    - name: Enable Wake-on-WLAN if it is disabled.
      command: 'iw phy0 wowlan enable magic-packet'
      when: hardware.wowlan.enabled and wowlan_enabled.rc != 0

    - name: Check whether Bluetooth is blocked.
      changed_when: false
      ignore_errors: yes
      no_log: yes
      register: bluetooth_blocked
      shell: 'rfkill list bluetooth | grep "blocked: yes"'
      when: hardware.bluetooth.enabled

    - name: Enable Bluetooth if it is blocked.
      command: 'rfkill unblock bluetooth'
      when: hardware.bluetooth.enabled and bluetooth_blocked.rc == 0

    - name: Create required directories.
      become_user: '{{ user }}'
      file:
        mode: '{{ item.mode | default("0775") }}'
        path: '{{ item.path }}'
        state: directory
      with_items: '{{ directories }}'

    # Must run before tasks that reference the shortcut such as adding items to the Plank. -- cwells
    - name: Create shortcuts for RDP access.
      copy:
        content: |
          [Desktop Entry]
          Name={{ item }}
          Comment=Remotely access {{ item }}
          Type=Application
          StartupNotify=true
          Exec=xfreerdp -clipboard /f /multimon /network:lan /smart-sizing:1920x1080 /sound /u:{{ user }} /v:{{ item }}
          Icon=preferences-desktop-remote-desktop
          Terminal=false
          Categories=Network;RemoteAccess;
        dest: /usr/share/applications/{{ item }}.desktop
        mode: '644'
      when: '"freerdp2-x11" in packages.install'
      with_items: '{{ rdp_hosts }}'

    - name: Create shortcut for RDP with no multi-monitor.
      become_user: '{{ user }}'
      copy:
        content: |
          #!/bin/sh

          xfreerdp -clipboard /f /network:lan /smart-sizing:1920x1080 /sound /u:{{ user }} /v:{{ item }}
        dest: ~/bin/rdp-no-multimon
        mode: '755'
      when: '"freerdp2-x11" in packages.install'
      with_items: '{{ rdp_hosts }}'

    - name: Create shortcut for RDP over the VPN.
      become_user: '{{ user }}'
      copy:
        content: |
          #!/bin/sh

          xfreerdp -clipboard /f /network:lan /smart-sizing:1920x1080 /u:{{ user }} /v:{{ lookup('community.general.dig', (item + '.'), 'qtype=A') }}
        dest: ~/bin/rdp-vpn
        mode: '755'
      when: '"freerdp2-x11" in packages.install'
      with_items: '{{ rdp_hosts }}'

    - name: Enable autostart applications.
      become_user: '{{ user }}'
      copy:
        dest: '{{ item.dest }}'
        mode: '644'
        remote_src: yes
        src: '{{ item.src }}'
      with_items: '{{ autostart }}'

    - name: Apply dconf settings.
      become_user: '{{ user }}'
      community.general.dconf:
        key: '{{ item.option }}'
        value: '{{ item.value }}'
      with_items: '{{ preferences.dconf }}'

    - name: Remove default icons from Plank.
      become_user: '{{ user }}'
      file:
        path: '~/.config/plank/dock1/launchers/{{ item }}.dockitem'
        state: absent
      with_items: '{{ plank.remove }}'

    - name: Add desired icons to Plank.
      become_user: '{{ user }}'
      copy:
        content: |
          [PlankDockItemPreferences]
          Launcher=file:///usr/share/applications/{{ item }}.desktop
        dest: '~/.config/plank/dock1/launchers/{{ item }}.dockitem'
        mode: '644'
      with_items: '{{ plank.add }}'

    - name: Configure KeePassXC if installed.
      become_user: '{{ user }}'
      community.general.ini_file:
        no_extra_spaces: yes
        path: ~/.config/keepassxc/keepassxc.ini
        option: '{{ item.option }}'
        section: '{{ item.section }}'
        value: '{{ item.value }}'
      when: '"keepassxc" in packages.install'
      with_items: '{{ preferences.keepassxc }}'
